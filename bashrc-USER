# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=20000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}[\A]\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$(kube_ps1)\$ '
    PS2='--> '
else
    #PS1='${debian_chroot:+($debian_chroot)}[\A]\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[01;33m\]$(__git_ps1 "(%s)")\[\033[00m\]\$ '
    PS1='${debian_chroot:+($debian_chroot)}[\A]\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    PS2='--> '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto -h'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias l='ls -hlF'
alias ll='ls -hAlF'
#alias la='ls -A'
#alias l='ls -CF'

alias 8888='ping -c 5 8.8.8.8'
alias active='grep -v -e "^$" -e"^ *#"'
alias alias_show='grep -n "^[\t ]*alias " ~/.bashrc'
alias alias_show_ALL='alias -p'
alias dec2hex='printf "%x\n" $1'
alias diff='colordiff'
alias dmesg='dmesg | ccze -A'
alias dmesgtail='\dmesg | tail -n 40 | ccze -A'
alias less='less -R'
alias jq='jq -C'
alias ds='du -khs * | sort -h'
alias erase='shred -n 35 -z -u'
alias freq='cut -f1 -d" " ~/.bash_history | sort | uniq -c | sort -nr | head -n 30'
alias grep='grep --color'
alias hex2dec='printf "%d\n" 0x$1'
alias ifme='curl ifconfig.co/json'
alias myip='curl ifconfig.co'
#alias myip='curl myip.it | grep -i "Your IP address"'
alias install='apt-get install'
alias net_lis='netstat -plev'
alias net_stat='netstat -s'
alias netlisteners='lsof -i -P | grep LISTEN | ccze -A'
alias ping='ping -c 3'
alias poogle='ping -c 5 www.google.com'
alias putan='netstat -putan'
alias battery='upower -i /org/freedesktop/UPower/devices/battery_BAT0| grep --color=never -E "state|to\ full|to\ empty|percentage"'
alias pbcopy="xclip -selection c" #apt install xclip
alias pbpaste="xclip -selection c -o" #apt install xclip
alias ip='ip --color'
alias dig8888='dig @8.8.8.8 +ttlunits'
alias dig1001='dig @1.0.0.1 +ttlunits'
alias soundrestart='pulseaudio -k && sudo alsa force-reload'
alias sl='sl -e'
alias curlilv='curl -ILv'

alias kk='exa -lah' #install 'exa' first!

alias dps='docker ps'
alias dim="docker images"
alias dxec='dxec-fn'
alias dlog='dlog-fn'
alias dfnodocker='df -hlT -x overlay -x tmpfs'

function k8sdebug
{
  local NAMESPACE="$1"
  if [[ -z "$NAMESPACE" ]]; then
    echo "[INFO] Namespace non specificato. Verrà utilizzato quello corrente: \"$(kubectl config view --minify -o jsonpath='{..namespace}')\""
  fi
  case $NAMESPACE in
    -h|--help)
      echo "Usage: k8sdebug [NAMESPACE]"
      ;;
    *)
      kubectl run -n "$NAMESPACE" -it --rm k8s-debug --image=wbitt/network-multitool:alpine-extra --restart=Never -- bash
      ;;
  esac
}

function dxec-fn {
  docker exec -it $1 ${2:-bash}
}

function dlog-fn {
  docker logs -f --tail=100 $1
}

if [[ -d ~/GIT ]]; then
    alias cdgit='cd ~/GIT'
elif [[ -d ~/gitlab ]]; then
    alias cdgit="cd ~/gitlab"
fi
alias cdstu3='cdgit && cd stu3/stu3'
alias rc='rancher config'
alias dc='docker-compose'
alias php-local='docker-compose exec php bash'
alias up='docker-compose pull && docker-compose --env-file .env up -d'
alias down='docker-compose down'
alias reset-all='./scripts/reset-all.sh'
alias soft-reset='./scripts/soft-reset.sh'
alias api="./scripts/vcapi-dev.sh"
alias cdstu3italia="cd $(pwd)/docker/php/web/themes/custom/stu3_italia"
alias cdvalidator="cd $(pwd)/docker/php/web/libraries/validator"
alias git="LANG=en_US.UTF-8 git"

function update_k9s
{
  K9S_LATEST_VERSION="$(curl -sSL https://api.github.com/repos/derailed/k9s/tags | jq -r '.[0].name')" && \
  wget -q -O /tmp/k9s_latest.tar.gz "https://github.com/derailed/k9s/releases/download/$K9S_LATEST_VERSION/k9s_Linux_x86_64.tar.gz" && \
  tar xzf /tmp/k9s_latest.tar.gz -C /tmp/ && \
  sleep 0.5 && \
  chmod 554 /tmp/k9s && \
  echo "[SUDO Password]" && \
  sudo mv /tmp/k9s /usr/local/bin/ && \
  rm /tmp/k9s_latest.tar.gz
}

if type codium &> /dev/null; then
    alias code='codium'
fi

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

man() {
	env \
	LESS_TERMCAP_mb=$'\e[01;31m' \
	LESS_TERMCAP_md=$'\e[01;31m' \
	LESS_TERMCAP_me=$'\e[0m' \
	LESS_TERMCAP_se=$'\e[0m' \
	LESS_TERMCAP_so=$'\e[01;44;33m' \
	LESS_TERMCAP_ue=$'\e[0m' \
	LESS_TERMCAP_us=$'\e[01;32m' \
	man "$@"
}

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
    fi
fi

#https://gist.github.com/ipedrazas/2c93f6e74737d1f8a791
function dip() {
        if [ -z $1 ]; then
                docker ps -a --format "{{.ID}}" | while read -r line ; do
                        echo $line $(docker inspect --format "{{ .Name }} {{ .NetworkSettings.Networks.bridge.IPAddress }}" $line | sed 's/\///'):$(docker port "$line" | grep -o "0.0.0.0:.*" | cut -f2 -d:)
                done
        else
                echo $(docker inspect --format "{{.ID }} {{ .Name }} {{ .NetworkSettings.Networks.bridge.IPAddress }}" $1 | sed 's/\///'):$(docker port "$1" | grep -o "0.0.0.0:.*" | cut -f2 -d:)
        fi
}

#Bash git prompt PS1
#https://github.com/oyvindstegard/bashgit
#curl -o ~/.bashgit https://raw.githubusercontent.com/oyvindstegard/bashgit/master/.bashgit
if [ -f ~/.bashgit ]; then
    . ~/.bashgit
fi

fn_gcp_createmenu()
{
    # 'REPLY' è il numero scelto
    # 'option' è l'item dell'array
    echo "Numero di opzioni disponibili: $#"
    select option; do # in "$@" is the default
        if [[ "$REPLY" -ge 1 ]] && [[ "$REPLY" -le "$#" ]]; then
            echo "Hai selezionato: $option"
            export GCP_CUSTOMER="$option"
            break;
        else
            echo "Incorrect input: Select a number 1-$#"
        fi
    done
}

function stu
{
    command -v kubectl >/dev/null 2>&1 || { echo >&2 "[ERROR] Command 'kubectl' not found!"; }
    command -v jq >/dev/null 2>&1 || { echo >&2 "[ERROR] Command 'jq' not found!"; }

    case "$1" in
        -s|--shell)
            if [[ -n "$2" ]] && [[ "$2" != "-h" ]] && [[ "$2" != "--help" ]]; then

                local GCP_CURRENT_ENV="$(kubectl config current-context)"

                case "$3" in
                    staging)
                        local GCP_NEW_ENV="gke_sportello-telematico-dev_europe-west1-b_staging"
                        ;;
                    prod)
                        local GCP_NEW_ENV="gke_sportello-telematico_europe-west1-b_stu3-prod"
                        ;;
                    *)
                        case $GCP_CURRENT_ENV in
                            gke_sportello-telematico-dev_europe-west1-b_staging)
                                local GCP_CURRENT_NAME="STAGING"
                                ;;
                            gke_sportello-telematico_europe-west1-b_stu3-prod)
                                local GCP_CURRENT_NAME="PROD"
                                ;;
                        esac
                        echo -e "[INFO] Verrà utilizzato l'ambiente corrente: \"$GCP_CURRENT_NAME\""
                        ;;
                esac
                if [[ -n "$GCP_NEW_ENV" ]]; then
                    kubectl config use-context "$GCP_NEW_ENV" > /dev/null
                fi

                local GCP_CUSTOMER="$2"

                local gcp_customer_list=$(kubectl get deploy -o jsonpath='{.items[*].metadata.labels}' | /usr/bin/jq '.' | grep "cloud.maggioli.it/customer-" | grep "${GCP_CUSTOMER}" | sed 's!cloud.maggioli.it/customer-!!' | sed 's/^  //' | cut -f1 -d":" | sort -u | sed 's/"//g')
                readarray -t <<<$gcp_customer_list

                if [[ -z "$gcp_customer_list" ]]; then
                    echo -e "\n[ERROR] Non riesco a trovare il customer GCP inserito! Controlla di averlo scritto correttamente."
                    local STATUS="ko"
                    # exit 1
                fi

                if [[ "$STATUS" != "ko" ]]; then
                    # Count items in "MAPFILE" array (created by previous "readarray" command)
                    if [[ ${#MAPFILE[@]} -eq 0 ]]; then
                        echo -e "\n[ERROR] Nothing to do. Exiting."
                        # exit 1
                    fi
                    if [[ ${#MAPFILE[@]} -eq 1 ]]; then
                        #echo "Esiste un solo customer GCP corrispondente. Proseguo senza il menu di scelta."
                        local GCP_CUSTOMER="${MAPFILE[0]}"
                        echo "[INFO] Customer: \"$GCP_CUSTOMER\""
                    fi
                    if [[ ${#MAPFILE[@]} -gt 1 ]]; then
                        #echo "Menu di scelta:"
                        PS3="Enter a number: "
                        fn_gcp_createmenu "${MAPFILE[@]}"
                    fi

                    # Recupero il nome del DEPLOYMENT grazie alla label customer
                    local GCP_DEPLOY_NAME="$(kubectl get deploy -n stu -l 'cloud.maggioli.it/customer-'"${GCP_CUSTOMER}"'' -o jsonpath='{.items[*].metadata.name}')"

                    if [[ -z "$GCP_DEPLOY_NAME" ]]; then
                        echo -e "\n[ERROR] Non trovo il deployment corrispondente al customer inserito!"
                        # exit 1 # valido solo in un ciclo "for", "while" o "until"
                    fi

                    # Recupero il nome del POD in base al nome del deployment (filtrando tra quelli running e prendendo il più giovane, esclusi 'cron' e 'upgrade')
                    local GCP_POD_NAME="$(kubectl get pods -n stu --field-selector status.phase=Running --sort-by=.metadata.creationTimestamp -l 'app.kubernetes.io/instance='"$GCP_DEPLOY_NAME"'' | grep "$GCP_DEPLOY_NAME" | grep -v "cron" | grep -v "upgrade" | awk 'END {print $1}' | xargs echo)"

                    if [[ -z "$GCP_POD_NAME" ]]; then
                        echo -e "\n[ERROR] Non trovo il pod corrispondente al deployment inserito!"
                        # exit 1 # valido solo in un ciclo "for", "while" o "until"
                    fi

                    # Magic here
                    kubectl exec -it -n stu po/"$GCP_POD_NAME" -c php -- /bin/bash

                    if [[ -n "$GCP_NEW_ENV" ]]; then
                        kubectl config use-context "$GCP_CURRENT_ENV" > /dev/null
                    fi

                fi
                unset GCP_CUSTOMER
            else
                echo 'Uso: stu -s|--shell [PORTALE]'
                echo 'Usare "stu --help" per ulteriori informazioni.'
            fi
            ;;
        -u|--uli)
            if [[ -n "$2" ]] && [[ -n "$3" ]]; then

                local GCP_CURRENT_ENV="$(kubectl config current-context)"

                case "$3" in
                    staging)
                        local GCP_NEW_ENV="gke_sportello-telematico-dev_europe-west1-b_staging"
                        ;;
                    prod)
                        local GCP_NEW_ENV="gke_sportello-telematico_europe-west1-b_stu3-prod"
                        ;;
                    *)
                        case $GCP_CURRENT_ENV in
                            gke_sportello-telematico-dev_europe-west1-b_staging)
                                local GCP_CURRENT_NAME="STAGING"
                                ;;
                            gke_sportello-telematico_europe-west1-b_stu3-prod)
                                local GCP_CURRENT_NAME="PROD"
                                ;;
                        esac
                        echo -e "[INFO] Verrà utilizzato l'ambiente corrente: \"$GCP_CURRENT_NAME\""
                        ;;
                esac
                if [[ -n "$GCP_NEW_ENV" ]]; then
                    kubectl config use-context "$GCP_NEW_ENV" > /dev/null
                fi

                local GCP_CUSTOMER="$2"

                local gcp_customer_list=$(kubectl get deploy -o jsonpath='{.items[*].metadata.labels}' | /usr/bin/jq '.' | grep "cloud.maggioli.it/customer-" | grep "${GCP_CUSTOMER}" | sed 's!cloud.maggioli.it/customer-!!' | sed 's/^  //' | cut -f1 -d":" | sort -u | sed 's/"//g')
                readarray -t <<<$gcp_customer_list

                if [[ -z "$gcp_customer_list" ]]; then
                    echo -e "\n[ERROR] Non riesco a trovare il customer GCP inserito! Controlla di averlo scritto correttamente."
                    local STATUS="ko"
                    # exit 1
                fi

                if [[ "$STATUS" != "ko" ]]; then
                    # Count items in "MAPFILE" array (created by previous "readarray" command)
                    if [[ ${#MAPFILE[@]} -eq 0 ]]; then
                        echo -e "\n[ERROR] Nothing to do. Exiting."
                        # exit 1
                    fi
                    if [[ ${#MAPFILE[@]} -eq 1 ]]; then
                        #echo "Esiste un solo customer GCP corrispondente. Proseguo senza il menu di scelta."
                        local GCP_CUSTOMER="${MAPFILE[0]}"
                        echo "[INFO] Customer: \"$GCP_CUSTOMER\""
                    fi
                    if [[ ${#MAPFILE[@]} -gt 1 ]]; then
                        #echo "Menu di scelta:"
                        PS3="Enter a number: "
                        fn_gcp_createmenu "${MAPFILE[@]}"
                    fi

                    # Recupero il nome del DEPLOYMENT grazie alla label customer
                    local GCP_DEPLOY_NAME="$(kubectl get deploy -n stu -l 'cloud.maggioli.it/customer-'"${GCP_CUSTOMER}"'' -o jsonpath='{.items[*].metadata.name}')"

                    if [[ -z "$GCP_DEPLOY_NAME" ]]; then
                        echo -e "\n[ERROR] Non trovo il deployment corrispondente al customer inserito!"
                        # exit 1 # valido solo in un ciclo "for", "while" o "until"
                    fi

                    # Recupero il nome del POD in base al nome del deployment (filtrando tra quelli running e prendendo il più giovane, esclusi 'cron' e 'upgrade')
                    local GCP_POD_NAME="$(kubectl get pods -n stu --field-selector status.phase=Running --sort-by=.metadata.creationTimestamp -l 'app.kubernetes.io/instance='"$GCP_DEPLOY_NAME"'' | grep "$GCP_DEPLOY_NAME" | grep -v "cron" | grep -v "upgrade" | awk 'END {print $1}' | xargs echo)"

                    if [[ -z "$GCP_POD_NAME" ]]; then
                        echo -e "\n[ERROR] Non trovo il pod corrispondente al deployment inserito!"
                        # exit 1 # valido solo in un ciclo "for", "while" o "until"
                    fi

                    # Magic here
                    # rancher exec -it stu3-$2-php-1 bash -c 'drush -r /var/www/html/web uli --uri="$CUSTOMER_DOMAIN" --name='$3''
                    # kubectl exec -n stu po/"$GCP_POD_NAME" -c php -- /bin/bash -c 'drush -r /var/www/html/web uli --uri="$CUSTOMER_DOMAIN" --name='$3''
                    kubectl exec -n stu po/"$GCP_POD_NAME" -c php -- /app/vendor/bin/drush --root="/app/web"  uli -l "$GCP_CUSTOMER" --name="$3"

                    if [[ -n "$GCP_NEW_ENV" ]]; then
                        kubectl config use-context "$GCP_CURRENT_ENV" > /dev/null
                    fi

                fi
                unset GCP_CUSTOMER
            else
                echo 'Uso: stu3 -u|--uli [CUSTOMER NAME] [USERNAME]'
                echo 'Es. "stu3 -u|--uli montichiari franco.franco"'
                echo 'Usare "stu3 --help" per ulteriori informazioni.'
            fi
            ;;
        -h|--help)
            echo 'Uso: stu [COMANDI] [ARGS]...'
            echo ''
            echo 'Comandi:'
            echo '  -s, --shell [PORTALE] [ENV]        Apre il container PHP del portale indicato;'
            echo "  -h, --help                         Visualizza questa pagina di aiuto;"
            echo ''
            echo "Esegui 'stu [COMANDO] --help' per avere più informazioni sul comando."
            ;;
        *)
            $(echo "stu --help")
            ;;
    esac
}

function stu3 {
case "$1" in
-s|--shell)
    if [ -n "$2" ] && [ "$2" != "-h" ] && [ "$2" != "--help" ]
    then
        CURRENT_ENV=$(cat ~/.rancher/cli.json | awk -F ":" '{print $6}' | awk -F "\"" '{print $2}')
        case $3 in
            dev-trento)
                NEW_ENV=1a5426
            ;;
            staging)
                NEW_ENV=1a5
            ;;
            prod)
                NEW_ENV=1a249
            ;;
            prod-brescia)
                NEW_ENV=1a21530
            ;;
            prod-cmvallecamonica)
                NEW_ENV=1a65872
            ;;
            prod-mantova)
                NEW_ENV=1a47499
            ;;
            prod-messina)
                NEW_ENV=1a68497
            ;;
            prod-prato)
                NEW_ENV=1a19440
            ;;
            prod-trento)
                NEW_ENV=1a19399
            ;;

            *)
                case $CURRENT_ENV in
                    1a5426)
                        CURRENT_NAME="DEV-TRENTO"
                        ;;
                    1a5)
                        CURRENT_NAME="STAGING"
                        ;;
                    1a249)
                        CURRENT_NAME="PROD"
                        ;;
                    1a21530)
                        CURRENT_NAME="PROD-BRESCIA"
                        ;;
                    1a65872)
                        CURRENT_NAME="PROD-CMVALLECAMONICA"
                        ;;
                    1a47499)
                        CURRENT_NAME="PROD-MANTOVA"
                        ;;
                    1a68497)
                        CURRENT_NAME="PROD-MESSINA"
                        ;;
                    1a19440)
                        CURRENT_NAME="PROD-PRATO"
                        ;;
                    1a19399)
                        CURRENT_NAME="PROD-TRENTO"
                        ;;
                esac

                echo -e "ATTENZIONE - Verrà utilizzato l'ambiente corrente: $CURRENT_NAME"
            ;;
        esac
        if [ -n "$NEW_ENV" ]
        then
            sed -i -e "s/${CURRENT_ENV}/${NEW_ENV}/g" ~/.rancher/cli.json
        fi

        rancher exec -it stu3-$2-php-1 bash

        if [ -n "$NEW_ENV" ]
        then
        sed -i -e "s/${NEW_ENV}/${CURRENT_ENV}/g" ~/.rancher/cli.json
        fi

    else
        echo 'Uso: stu3 -s|--shell [PORTALE]'
        echo 'Usare "stu3 --help" per ulteriori informazioni.'
    fi
    ;;
-sr|--shell-root)
    if [ -n "$2" ] && [ "$2" != "-h" ] && [ "$2" != "--help" ]
    then
        CURRENT_ENV=$(cat ~/.rancher/cli.json | awk -F ":" '{print $6}' | awk -F "\"" '{print $2}')
        case $3 in
            dev-trento)
                NEW_ENV=1a5426
            ;;
            staging)
                NEW_ENV=1a5
            ;;
            prod)
                NEW_ENV=1a249
            ;;
            prod-brescia)
                NEW_ENV=1a21530
            ;;
            prod-cmvallecamonica)
                NEW_ENV=1a65872
            ;;
            prod-mantova)
                NEW_ENV=1a47499
            ;;
            prod-messina)
                NEW_ENV=1a68497
            ;;
            prod-prato)
                NEW_ENV=1a19440
            ;;
            prod-trento)
                NEW_ENV=1a19399
            ;;

            *)
                case $CURRENT_ENV in
                    1a5426)
                        CURRENT_NAME="DEV-TRENTO"
                        ;;
                    1a5)
                        CURRENT_NAME="STAGING"
                        ;;
                    1a249)
                        CURRENT_NAME="PROD"
                        ;;
                    1a21530)
                        CURRENT_NAME="PROD-BRESCIA"
                        ;;
                    1a65872)
                        CURRENT_NAME="PROD-CMVALLECAMONICA"
                        ;;
                    1a47499)
                        CURRENT_NAME="PROD-MANTOVA"
                        ;;
                    1a68497)
                        CURRENT_NAME="PROD-MESSINA"
                        ;;
                    1a19440)
                        CURRENT_NAME="PROD-PRATO"
                        ;;
                    1a19399)
                        CURRENT_NAME="PROD-TRENTO"
                        ;;
                esac

                echo -e "ATTENZIONE - Verrà utilizzato l'ambiente corrente: $CURRENT_NAME"
            ;;
        esac
        if [ -n "$NEW_ENV" ]
        then
            sed -i -e "s/${CURRENT_ENV}/${NEW_ENV}/g" ~/.rancher/cli.json
        fi

        rancher exec -it --user=root stu3-$2-php-1 bash

        if [ -n "$NEW_ENV" ]
        then
        sed -i -e "s/${NEW_ENV}/${CURRENT_ENV}/g" ~/.rancher/cli.json
        fi

    else
        echo 'Uso: stu3 -sr|--shell-root [PORTALE]'
        echo 'Usare "stu3 --help" per ulteriori informazioni.'
    fi
    ;;
-nginx)
    if [ -n "$2" ] && [ "$2" != "-h" ] && [ "$2" != "--help" ]; then
        rancher exec -it --user=root stu3-$2-php-nginx-1 sh
    else
        echo 'Uso: stu3 -nginx [PORTALE]'
        echo 'Usare "stu3 --help" per ulteriori informazioni.'
    fi
    ;;
-u|--uli)
    if [ -n "$2" ] && [ -n "$3" ]
    then
        #rancher exec -it stu3-$2-php-1 drush -r /var/www/html/web uli $3;
        rancher exec -it stu3-$2-php-1 bash -c 'drush -r /var/www/html/web uli --uri="$CUSTOMER_DOMAIN" --name='$3''
    else
        echo 'Uso: stu3 -u|--uli [CUSTOMER NAME] [USERNAME]'
        echo 'Es. "stu3 -u|--uli montichiari franco.franco"'
        echo 'Usare "stu3 --help" per ulteriori informazioni.'
    fi
    ;;
-l|--login)
    if [ -n "$2" ] && [ -n "$3" ]
    then
        #rancher exec -it stu3-$2-php-1 drush --uri="https://nginx.stu3-$2.$4.globogis.srl" uli $3 | tail -n 1 | ( xargs xdg-open & ) >/dev/null 2>&1
        rancher exec -it stu3-$2-php-1 bash -c 'drush -r /var/www/html/web uli --uri="$CUSTOMER_DOMAIN" --name='$3'' | tail -n 1 | $(xargs xdg-open &) >/dev/null 2>&1
    else
        echo 'Uso: stu3 -l|--login [CUSTOMER NAME] [USERNAME]'
        echo 'Es. "stu3 -l|--login montichiari franco.franco"'
        echo 'Usare "stu3 --help" per ulteriori informazioni.'
    fi
    ;;
-pi|--payment-integration)
    if [ -n "$2" ]
    then
        rancher exec -it stu3-$2-php-1 drush -r /var/www/html/web cget stu_payments.config | grep enable_integration | awk  '{print $2}';
    else
        echo 'Uso: stu3 -pi|--payment-integration [PORTALE]'
        echo 'Usare "stu3 --help" per ulteriori informazioni.'
    fi
    ;;
-p|--php)
    if [ -n "$2" ]
    then
        rancher exec -it stu3-$2-php-1 drush -r /var/www/html/web php;
    else
        echo 'Uso: stu3 -p|--php [PORTALE]'
        echo 'Usare "stu3 --help" per ulteriori informazioni.'
    fi
    ;;
-b|--browser)
    if [ -n "$2" ] && [ -n "$3" ]
    then
        ( xdg-open "https://nginx.stu3-"$2"."$3".globogis.srl" & ) >/dev/null 2>&1
    else
        echo 'Uso: stu3 -b|--browser [PORTALE] [ENV]'
        echo 'Usare "stu3 --help" per ulteriori informazioni.'
    fi
    ;;
-qr|--qr-code)
    if [ -z "$2" ] || [ "$2" == "-h" ] || [ "$2" == "--help" ]
    then
        echo 'Uso: stu3 -qr|--qr-code [URL]'
        echo 'Usare "stu3 --help" per ulteriori informazioni.'
    else
        if ! [ -x "$(command -v qrencode)" ]; then
            echo "Install qrencode first! apt-get install qrencode"
        else
            ( export TMPIMG="/tmp/url.png" && qrencode -s 5 -o $TMPIMG "$2" && eog $TMPIMG & ) >/dev/null 2>&1
        fi
    fi
    ;;
-e|--env)
    ENV=$(cat ~/.rancher/cli.json | awk -F ":" '{print $6}' | awk -F "\"" '{print $2}')
    echo -n "Ambiente: $ENV"

    case $ENV in
    1a5)
        echo " --> STAGING"
    ;;
    1a249)
        echo " --> PROD"
    ;;
    1a19440)
        echo " --> PROD-PRATO"
    ;;
    1a5426)
        echo " --> DEV-TRENTO"
    ;;
    1a19399)
        echo " --> PROD-TRENTO"
    ;;
    1a21530)
        echo " --> PROD-BRESCIA"
    ;;
    1a85192)
        echo " --> DEV-GENOVA"
    ;;
    1a91043)
        echo " --> PROD-GENOVA"
    ;;
    1a78943)
        echo " --> PROD-CATTOLICA"
    ;;
    1a65872)
        echo " --> PROD-VALLECAMONICA"
    ;;
    1a47499)
        echo " --> PROD-MANTOVA"
    ;;
    1a68497)
        echo " --> PROD-MESSINA"
    ;;
    *)
        echo -e "\nERROR: No Env!!"
    esac
    ;;
-ge|--get-env)
    TMPFILE='/tmp/rancher_getenv'
    ENV=$(cat ~/.rancher/cli.json | awk -F ":" '{print $6}' | awk -F "\"" '{print $2}')

    #rancher env | grep -w "$ENV"
    rancher env > $TMPFILE
    sed -n 1p $TMPFILE && grep -w "$ENV" $TMPFILE
    rm $TMPFILE
    ;;
-cn|--customer-name|--list)
    #rancher stacks | cut -f5 -d " " | grep -P "(?<=stu3-).*" | cut -f2- -d "-" | sort
    rancher stacks | awk '{print $2}' | grep -P "(?<=stu3-).*" | cut -f2- -d "-" | sort
    ;;
-w|--wiki)
    if [ -z "$2" ]; then
        ( xdg-open "https://git.globogis.it/stu3/stu3/wikis/home" & ) >/dev/null 2>&1
    else
        ( xdg-open  "https://git.globogis.it/"$1"/wikis/home" & ) >/dev/null 2>&1
    fi
    ;;
-sb|--sito-bellissimo)
    url="http://www.comuni-italiani.it/risultati.html?cx=010810535063026879875%3A28vwiyynxei&cof=FORID%3A9&ie=ISO-8859-1&oe=ISO-8859-1&q=informazioni+"${@:2}"&image.x=0&image.y=0"
    url_nospace="${url// /+}"
    xdg-open $url_nospace
    ;;
-sm|--sending-methods)
    if [ -n "$2" ]
    then
        rancher exec -it stu3-$2-php-1 drush -r /var/www/html/web sqlq "SELECT DISTINCT sending_method FROM dispatcher_organizational_unit;";
    else
        echo 'Uso: stu3 -sm|--sending-methods [PORTALE]'
        echo 'Usare "stu3 --help" per ulteriori informazioni.'
    fi
    ;;
-ns|--num-storage)
    jq_type="$(type -t jq)"
    if [[ $jq_type != "file" ]] && [[ $jq_type != "alias" ]]; then
        echo "Install jq first! apt-get install jq"
    else
        stack_name=$(rancher stacks | awk '{print $2}' | grep "${@:2}")
        for s in $stack_name
        do
            nfs_service=$(rancher inspect $s | jq '.environment.nfs_service')
            storage_service=$(rancher inspect $s | jq '.environment.storage_service')
            solr_service=$(rancher inspect $s | jq '.environment.solr_service')
            echo "Customer: $(echo "$s" | cut -f2- -d"-")"
            echo "> Filesystem:  $nfs_service"
            echo "> Database:  $storage_service"
            echo "> Solr:  $solr_service"
            done
    fi
    ;;
-gd|--get-duplicates)
    rancher ps | grep "stu3-" | grep -v "catview\|mailhog\|ansible" | grep -v "4/1"
    ;;
-nc|--nome-container)
    jq_type="$(type -t jq)"
    if [[ $jq_type != "file" ]] && [[ $jq_type != "alias" ]]; then
        echo "Install jq first! apt-get install jq"
    else
        if [ "$#" == 1 ]; then
            echo "Missing parameter(s)"
        else
            stack_id=($(rancher ps | grep "${2}" | cut -d" " -f1 | uniq))
            echo "Stack ID(s): ${stack_id[@]}"

            #rancher inspect 1s1497 | jq '.instanceIds[0]' | awk -F'"' '{print $2}'
            instance_ids=()
            for id in ${stack_id[@]}
            do
                single_id=$(rancher inspect "$id" | jq '.instanceIds' | awk -F'"' '{print $2}')
                instance_ids+=($single_id)
            done
            echo "Container ID(s): ${instance_ids[@]}"

            #rancher inspect 1i808389 | jq '.name' | awk -F'"' '{print $2}'
            for i in ${instance_ids[@]}
            do
                container_name=$(rancher inspect "$i" | jq '.name' | awk -F'"' '{print $2}')
                container_hostid=$(rancher inspect "$i" | jq '.hostId' | awk -F'"' '{print $2}')
                container_host=$(rancher inspect "$container_hostid" | jq '.hostname' | awk -F'"' '{print $2}')
                echo "> $container_name [$container_host]"
            done
        fi
    fi
    ;;
-t|--tags)
    if [ -n "$2" ] && [ "$2" != "-h" ] && [ "$2" != "--help" ]; then
        CURRENT_ENV=$(cat ~/.rancher/cli.json | awk -F ":" '{print $6}' | awk -F "\"" '{print $2}')
        case $2 in
            dev-trento)
                NEW_ENV=1a5426
            ;;
            staging)
                NEW_ENV=1a5
            ;;
            prod)
                NEW_ENV=1a249
            ;;
            prod-brescia)
                NEW_ENV=1a21530
            ;;
            prod-cmvallecamonica)
                NEW_ENV=1a65872
            ;;
            prod-mantova)
                NEW_ENV=1a47499
            ;;
            prod-messina)
                NEW_ENV=1a68497
            ;;
            prod-prato)
                NEW_ENV=1a19440
            ;;
            prod-trento)
                NEW_ENV=1a19399
            ;;

            *)
                case $CURRENT_ENV in
                    1a5426)
                        CURRENT_NAME="DEV-TRENTO"
                        ;;
                    1a5)
                        CURRENT_NAME="STAGING"
                        ;;
                    1a249)
                        CURRENT_NAME="PROD"
                        ;;
                    1a21530)
                        CURRENT_NAME="PROD-BRESCIA"
                        ;;
                    1a65872)
                        CURRENT_NAME="PROD-CMVALLECAMONICA"
                        ;;
                    1a47499)
                        CURRENT_NAME="PROD-MANTOVA"
                        ;;
                    1a68497)
                        CURRENT_NAME="PROD-MESSINA"
                        ;;
                    1a19440)
                        CURRENT_NAME="PROD-PRATO"
                        ;;
                    1a19399)
                        CURRENT_NAME="PROD-TRENTO"
                        ;;
                esac

                echo -e "ATTENZIONE - Verrà utilizzato l'ambiente corrente: $CURRENT_NAME"
            ;;
        esac
        if [ -n "$NEW_ENV" ]
        then
            sed -i -e "s/${CURRENT_ENV}/${NEW_ENV}/g" ~/.rancher/cli.json
        fi

        current_path=$(pwd)
        echo "Starting.." && mkdir -p /tmp/rancher-export-$2 && cd /tmp/rancher-export-$2 && rancher export &> /dev/null; \
        rg "  php:" -A1 | sort | grep image: | grep -v "drupal-" | grep -v "piwik" | grep -v "indicenorm" | sed -e 's!/docker-compose.yml-!!' | cut -d " " -f 1,6 | awk -F"stu3-" '{print $2}' | sed -e 's!registry.globogis.it/stu3/stu3/php:!!' \
        && cd .. && rm -rf /tmp/rancher-export-$2 && cd $current_path

        if [ -n "$NEW_ENV" ]
        then
        sed -i -e "s/${NEW_ENV}/${CURRENT_ENV}/g" ~/.rancher/cli.json
        fi

    else
        echo 'Uso: stu3 -t|--tags [ENV]'
        echo 'Usare "stu3 --help" per ulteriori informazioni.'
    fi



;;
-h|--help)
    echo 'Uso: stu3 [COMANDI] [ARGS]...'
    echo ''
    echo 'Comandi:'
    echo '  -b,  --browser [PORTALE] [ENV]        Apre il browser sul portale indicato'
    echo '  -cn, --customer-name                  Mostra la lista dei portali presenti in PROD'
    echo '  -nginx, [PORTALE]                     Apre il container NGINX del portale indicato come utente ROOT. Ocio!'
    echo '  -p,  --php [PORTALE]                  Apre la shell PHP del portale indicato'
    echo '  -s,  --shell [PORTALE] [ENV]          Apre il container php del portale indicato'
    echo '  -sr, --shell-root [PORTALE]           Apre il container php del portale indicato come utente ROOT. Ocio!'
    echo "  -e,  --env                            Mostra l'ambiente di Rancher attualmente configurato (veloce e insicuro)"
    echo "  -gd, --get-duplicates                 Mostra container duplicati"
    echo "  -ge, --get-env                        Mostra l'ambiente di Rancher attualmente configurato (lento e sicuro)"
    echo "  -l,  --login [PORTALE]                Apre il browser ed accede automaticamente come l'utente indicato"
    echo "  -nc, --nome-container                 Restituisce il nome del/dei container"
    echo "  -ns, --num-storage                    Restituisce su quale storage si trova il portale"
    echo "  -pi, --payment-integration [PORTALE]  Mostra l'integrazione dei pagamenti attiva sul portale"
    echo "  -qr, --qr-code [URL]                  Genera il QR CODE dell'url indicato"
    echo "  -sb, --sito-bellissimo                Cerca all'interno del sito più bello del web"
    echo "  -sm, --sending-methods [PORTALE]      Mostra i metodi d'invio presenti nel portale"
    echo "  -t,  --tags [ENV]                     Mostra i tag presenti nell'ENV selezionato"
    echo "  -u,  --uli [PORTALE] [USERNAME]       Genera un one-time link per accedere al portale come l'utente indicato"
    echo "  -w,  --wiki                           Apre la wiki STU3"
    echo "  -h,  --help                           Visualizza questa pagina di aiuto"
    echo ''
    echo "Esegui 'stu3 [COMANDO] --help' per più informazioni sul comando."
    ;;
*)
    $(echo "stu3 --help")
    ;;
esac
}

#NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

#FZF
if type rg &> /dev/null; then
    export FZF_DEFAULT_COMMAND='rg --files'
    export FZF_DEFAULT_OPTS='-m --height 50% --border'
fi

if type kubectl &> /dev/null; then
    source <(kubectl completion bash)
    alias k='kubectl'
    complete -F __start_kubectl k
fi

if type helm &> /dev/null; then
    source <(helm completion bash)
fi

if type kind &> /dev/null; then
    source <(kind completion bash)
fi

export EDITOR=vim
export K9S_EDITOR=vim

if type kubectx &> /dev/null; then
    #kubectx and kubens
    export PATH=~/.kubectx:$PATH
    export KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6) # blue text
    export KUBECTX_CURRENT_BGCOLOR=$(tput setab 7) # white background
    export KUBECONFIG="$HOME/.kube/config"
    #alias k9s="docker run --rm -it -v $KUBECONFIG:/root/.kube/config quay.io/derailed/k9s"
fi

#https://github.com/jonmosco/kube-ps1#from-source
#curl -sSL -o ~/kube-ps1.sh https://raw.githubusercontent.com/jonmosco/kube-ps1/master/kube-ps1.sh
# abilita/disabilita con `kubeon/kubeoff`
function get_cluster_short() {
  echo "$1" | cut -d _ -f4
}
KUBE_PS1_CLUSTER_FUNCTION=get_cluster_short
KUBE_PS1_SEPARATOR=:
KUBE_PS1_SYMBOL_PADDING=false
KUBE_PS1_SYMBOL_COLOR=cyan
KUBE_PS1_CTX_COLOR=magenta
if [ -f ~/kube-ps1.sh ]; then
    . ~/kube-ps1.sh
fi


#stern K8s
#source <(stern --completion=bash)

#GO
export PATH=$PATH:/usr/local/go/bin

#ROBOMONGO
export PATH="/usr/local/bin/robomongo/bin:${PATH}"

# BUG gcloud crash
#https://stackoverflow.com/questions/62658237/it-seems-that-the-version-of-the-libffi-library-seen-at-runtime-is-different-fro
#export CLOUDSDK_PYTHON=python3.7

complete -C /usr/bin/terraform terraform
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
