" Vimrc

" Vanilla vim with functionalities
" by: Fossen Matteo
" last update: 19/04/2024 11:52
" optional commands needs:
"   - ctags
"   - git
"   - ripgrep

"------------------------------------------------------------------------------
" SYSTEM

" === system: command ===
set nocp                                                   " disable vi compatible

" === system: directory ===
set asd                                                    " shell in current dir
set aw                                                     " write before close
set dir=/tmp                                               " swap dir
set bdir=/tmp                                              " backup dir
let loaded_netrwPlugin = 1                                 " disable netrw

" === system: clipboard ===
set cb=unnamedplus,unnamed

" === system: history ===
set hi=100                                                 " cmd history
if version >= 703
  set udir=/tmp                                            " undo dir
  set udf ul=1000 ur=10000                                 " undo levels
endif

"------------------------------------------------------------------------------
" INTERFACE

" === ui: color ===
colo slate
set t_Co=256                                               " 256 color mode

" === ui: content ===
filetype plugin on                                         " allow type from other plugins
set enc=utf-8                                              " files encoding
set mouse=a                                                " enable mouse usage
set nu                                                     " line numbers
set paste                                                  " disable comments/tab completion in paste
set ru                                                     " show file stats
set hid                                                    " allow edited buffer switch

" === ui: syntax ===
set ofu=syntaxcomplete#Complete

aug ui_syntax
  au BufNewFile,BufRead *.html.twig set syntax=html
aug END

aug ui_syntax_completion
  au FileType php setl ofu=phpcomplete#CompletePHP
  au FileType ruby,eruby setl ofu=rubycomplete#Complete
  au FileType html,xhtml setl ofu=htmlcomplete#CompleteTags
  au FileType c setl ofu=ccomplete#CompleteCpp
  au FileType css setl ofu=csscomplete#CompleteCSS
aug END

" === ui: indent ===
filetype indent on                                         " detect indent
set et                                                     " replaces tab with spaces
set fo=tcqrn1                                              " format type
set nosr                                                   " calculate tabs spaces
set so=4                                                   " lines around cursor
set sts=2                                                  " spaces when tabbing
set sw=2                                                   " indent length
set ts=2                                                   " tab to spaces
set tw=79                                                  " lines length

" === ui: highlight ===
filetype on
hi CursorLine term=bold cterm=bold
set bo=all                                                 " disable bell
syntax on

" === ui: search ===
set hls                                                    " highlight search
set ic                                                     " insensitive search
set is                                                     " incremental search

" === ui: statusbar ===
set ls=2 noml                                              " statusbar mode
set sc                                                     " partial commands
set smd                                                    " current mode
set stl=                                                   " clear statusline after reload
set stl=\ %F\ %M\ %Y\ %R                                   " set left side
set stl+=%=                                                " set separator
set stl+=\ %l:%c\ %p%%\                                    " set right side

" === ui: terminal ===
set sh=/bin/bash                                           " ensuring standard shell
set tenc=utf-8                                             " shells encoding
set tf                                                     " rendering

" === ui: wildmenu ===
set pa=$PWD/**
set wig=*.pyc,*.class,*.sln,*.Master,*.csproj,*.csproj.user,*.cache,*.dll,*.pdb,*.min.*,*.tar.*,*/.git/**/*,*/.hg/**/*,*/.svn/**/*,*.swp,*.bak,tags
set wmnu wim=list:full

"------------------------------------------------------------------------------
" MAPPING

" === map: leader ===
let mapleader="\<Space>"
let maplocalleader="_"

" === map: macro ===
map Q @@                                                   " repeat last recorded macro

" === map: buffer ===
nnoremap <leader>bd :bd<CR>                                " del buffer
nnoremap <leader>bn :bn<CR>                                " next buffer
nnoremap <leader>bp :bp<CR>                                " previous buffer

" === map: toggle ===
nnoremap <silent> <leader>cn :se nu!<CR>                   " toggle line numbers

" === map: copy ===
vnoremap Y 0y$                                             " copy line without carriage return

" === map: indent ===
nnoremap <leader>q gqip                                    " formatter
vnoremap < <gv                                             " keep visual mode while indenting
vnoremap > >gv                                             " keep visual mode while indenting

" === map: search ===
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz
nnoremap <silent> ]q :cnext<cr>
nnoremap <silent> [q :cprev<cr>
nnoremap <silent> <leader>/ :nohls<CR>

" === map: syntax ===
inoremap <expr> <TAB> pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <expr> <Esc> pumvisible() ? "\<C-e>" : "\<Esc>"
inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<Up>"

" === map: replace ===
nnoremap + <C-a>                                           " increment numbers
nnoremap - <C-x>                                           " decrement numbers
nnoremap <leader>sr :%s/\<<C-r><C-w>\>//g<left><left>
xnoremap * :<c-u>let @/=@"<cr>gvy:let [@/,@"]=[@",@/]<cr>/\V<c-r>=substitute(escape(@/,'/\'),'\n','\\n','g')<cr><cr>

" === map: wrap ===
nnoremap j gj
nnoremap k gk

" === map: window ===
cnoremap w!! :w !sudo tee %                                " save as root
nnoremap <leader>wf :tabe %<CR>                            " current window to tab
nnoremap <leader>wh <C-w>h                                 " left window
nnoremap <leader>wj <C-w>j                                 " lower window
nnoremap <leader>wk <C-w>k                                 " upper window
nnoremap <leader>wl <C-w>l                                 " right window
nnoremap <silent> <leader><leader>h+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <leader><leader>h- :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap <silent> <leader><leader>w+ :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> <leader><leader>w- :exe "vertical resize " . (winwidth(0) * 2/3)<CR>

" === map: tab ===
nnoremap <leader>te :tabe<CR>                              " new tab
nnoremap <leader>tq :tabc<CR>                              " close tab
nnoremap <leader>tn :tabn<CR>                              " next tab
nnoremap <leader>tp :tabp<CR>                              " prev tab

" === map: terminal ===
nnoremap <leader>wt :vertical term<CR>
nnoremap <Leader>tt :tab ter<CR>

" === map: shortcuts ===
nnoremap <leader>en :e ~/.notes.md<CR>                     " notes
nnoremap <leader>et :e /tmp/a<CR>                          " temp file
nnoremap <leader>ec :e ~/.vim/vimrc<CR>                    " vim config
nnoremap <leader>eh :bro ol<CR>                            " file history

"------------------------------------------------------------------------------
" DIFF

set dip+=algorithm:histogram,filler,indent-heuristic,internal,algorithm:patience,iwhite,vertical
set ve=block

"------------------------------------------------------------------------------
" SEARCH

" === search: recent files ===
aug search_files_recent                                " user 'P for php files
  au!
  au FileType css  normal! mC
  au FileType html normal! mH
  au FileType js,json   normal! mJ
  au FileType php  normal! mP
  au FileType twig normal! mT
aug END

" === search: content ===
let &grepprg='grep -n -R --exclude=' . shellescape(&wildignore) . ' $*'
set grepformat^=%f:%l:%c:%m
if executable('rg')
  set grepprg=rg\ --vimgrep\ --smart-case\ --follow
endif

function! Grep(...)
  return system(join([&grepprg] + [expandcmd(a:1)], ' ') . ['2>/dev/null'])
endfunction
command! -nargs=+ -complete=file_in_path -bar Grep laddexpr Grep(<f-args>) | lopen
nnoremap <silent> <leader>sg :execute 'Grep ' . input('grep> ')<CR>

" === search: file ===
function! Find(...)
  let s:findprg='find . -type f -iname "*%s*" -printf "%%p:1:1:%%f\n" 2>/dev/null |sort'
  return system(printf(s:findprg, a:1))
endfunction
command! -nargs=+ -complete=file_in_path -bar Find caddexpr Find(<f-args>) | copen
nnoremap <silent> <leader>sf :execute 'Find ' . input("file> ")<CR>

"------------------------------------------------------------------------------
" VANILLA PLUGINS

" Next section contain functions that use external commands like git and ctags

"------------------------------------------------------------------------------
" GIT
if executable('git')

  " === git: blame ===
  function! Blame()
    let filename = expand('%')
    let l:current_line = getcurpos()[1]
    let output = system('git blame ' . expandcmd(filename))
    if v:shell_error
      echo "Error running git blame"
      return
    endif

    vertical new
    call append(0, split(output, "\n"))
    execute 'normal ' . l:current_line . 'G'
    setlocal bt=nofile bh=hide noswf nobl noma nowrap nonu nornu nosc nosmd nolist syntax=git
  endfunction
  nnoremap <leader>gb :echo system('git blame -e -L ' . line('.') . ',' . line('.') . ' ' . expand('%:p'))<CR>
  nnoremap <leader>gB :call Blame()<CR>

endif

"------------------------------------------------------------------------------
" CTAGS
if executable('ctags')

  " === ctags: location ===
  set tags+=ctags

  " === ctags: generate ===
  nnoremap <Leader>rt :silent !ctags -f ./ctags -R --exclude=.git--exclude=vendor --exclude=node_modules --exclude=db --exclude=log . 2>/dev/null &<CR>:redraw!<CR>:echo 'Generating ctags...'<CR>

endif
