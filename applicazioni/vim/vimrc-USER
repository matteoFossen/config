set nocompatible
filetype off
set autoread "Reload files

"Plug :Plugins Manager: --> https://github.com/junegunn/vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif
"Specify a directory for plugins
call plug#begin('~/.vim/plugged')

"Theme
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
if $USER == "root"
    let g:airline_theme='minimalist'
else
    let g:airline_theme='papercolor'
endif
"Enable Powerline Fonts
"apt-get install fonts-powerline; fc-cache -f
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_section_y = 'BN: %{bufnr("%")}'
"/END THEME

"ROMPE git-blame!!
"Plug 'bling/vim-bufferline'

"NerdTree
Plug 'scrooloose/nerdtree'

"NerdTree GIT flags
Plug 'xuyuanp/nerdtree-git-plugin'

"Block Commenter \cc
Plug 'scrooloose/nerdcommenter'

"Buffergator
Plug 'jeetsukumaran/vim-buffergator'

"Full path fuzzy file finder
"Plug 'ctrlpvim/ctrlp.vim'

"Fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

"Ripgrep
Plug 'yegappan/grep'

"Git wrapper
Plug 'tpope/vim-fugitive'

"Git diff
Plug 'airblade/vim-gitgutter'
set updatetime=100

"Git Blame
Plug 'zivyangll/git-blame.vim'
"Git Blame
nnoremap <Leader>s :<C-u>call gitblame#echo()<CR>

"Surround, es. cs"', ds", cs'[
Plug 'tpope/vim-surround'

"Auto Pairs
"Plug 'jiangmiao/auto-pairs'

"Multiple Cursors. Default shortcut CTRL+n
Plug 'terryma/vim-multiple-cursors'

"Show HTML color -NON FUNZIONA-
"Plug 'lilydjwg/colorizer'
"Plug 'chrisbra/colorizer'

"Highlights the word under the cursor
Plug 'RRethy/vim-illuminate'

"Pulse everytime you scroll the search results
Plug 'inside/vim-search-pulse'

"Display number of search matches
"Plug 'google/vim-searchindex'

"Substitute preview
Plug 'osyo-manga/vim-over'

"Dockerfile
Plug 'ekalinin/Dockerfile.vim'
"Kubernetes snippets
Plug 'andrewstuart/vim-kubernetes'

"Show indent lines
Plug 'nathanaelkane/vim-indent-guides'
let g:indent_guides_guide_size = 1

" CODING SYNTAX
" --------------------
"Markdown
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled = 1
"Yaml
Plug 'stephpy/vim-yaml'
"HELM
Plug 'towolf/vim-helm'
"Terraform
Plug 'hashivim/vim-terraform'
let g:terraform_align=1
let g:terraform_fold_sections=0
"Ansible
Plug 'pearofducks/ansible-vim'
"Nginx
Plug 'chr4/nginx.vim'
"PHP
Plug 'stanangeloff/php.vim'
"CSS3
Plug 'hail2u/vim-css3-syntax'
"
Plug 'ap/vim-css-color'
"Json
Plug 'elzr/vim-json'
"Toml
Plug 'cespare/vim-toml'
"Jinjia2
Plug 'glench/vim-jinja2-syntax'
"CSV
Plug 'chrisbra/csv.vim'
"JavaScript
Plug 'pangloss/vim-javascript'
"Go
Plug 'fatih/vim-go'
"Ruby on rails
Plug 'tpope/vim-rails'
"Rust
Plug 'rust-lang/rust.vim'
"GraphQL
Plug 'jparise/vim-graphql'
"PostgreSQL
Plug 'lifepillar/pgsql.vim'

"
Plug 'tyru/open-browser.vim'
"Highlight trailing whitespace
Plug 'bronson/vim-trailing-whitespace'

"Icons - /!\ Keep as the last /!\
Plug 'ryanoasis/vim-devicons'

call plug#end()            "required
" Now we can turn our filetype functionality back on
filetype plugin indent on    "required

"
" NerdTree plugin
" --------------------
"
"Open a NERDTree automatically when vim starts up if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"Ctrl+o shortcut
map <C-o> :NERDTreeToggle<CR>
"NerdTree File Highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

"Automatically close NerdTree when opening a file
"let NERDTreeQuitOnOpen = 1

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

" --------------------
syntax on
set encoding=utf-8
hi Search ctermbg=LightBlue
hi Search ctermfg=Black

nnoremap <silent> ,<space> :nohlsearch<CR>
nnoremap <leader>x :bdelete<CR>
nnoremap <Leader>o o<Esc>
nnoremap <Leader>O O<Esc>
set pastetoggle=<leader>z
"set clipboard=unnamedplus "System clipboard
nnoremap <F5> :buffers<CR>:buffer<Space>
"Fzf
nnoremap <C-p> :Files<Cr>
nnoremap <silent> <Leader>f :Rg<CR>
nnoremap <silent> <Leader>g :Commits<CR>

"1 tab == 2 spaces
set shiftwidth=2
set tabstop=2     " tab spacing
set expandtab     " tabs are now spaces
set ai            " Auto indent
"set si           " Smart indent
set wrap          " Wrap lines
set nowrap        " Don't wrap text
"Show search index, v8.1 required
set shortmess-=S

"Blink cursor on error instead of beeping (grr)
set visualbell
set t_vb=

set cursorline
" Removes the underline
highlight clear CursorLine
" Sets the line numbering background
highlight CursorLineNR ctermbg=DarkGrey

" Statusline
" --------------------
"set statusline=\ %F%m%r%h%w%y[%p%%][%l,%L/%v]

" Always hide the statusline
"set laststatus=2

set statusline=%t      "tail of the filename
set statusline=%F       "file path
set statusline+=%m      "modified flag
set statusline+=%h      "help file flag
set statusline+=%r      "read only flag
set statusline+=%w      "preview window flag
set statusline+=\ [%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%y      "filetype
set statusline+=[buf:%n]        "buffer number
set statusline+=%{FugitiveStatusline()}	"add GIT branch
set statusline+=%=      "left/right separator
set statusline+=[l:\ %l/%L]   "cursor line/total lines
set statusline+=[c:\ %c]     "cursor column
set statusline+=\ %p%%   "percent through file
