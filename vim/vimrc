" Vimrc
" by: Fossen Matteo
" last update: 10/04/2024 16:07
" optional commands needs:
"   - ctags
"   - git
"   - ripgrep

"------------------------------------------------------------------------------
" SYSTEM

" === system: command ===
set nocompatible                    " disable vi compatible

" === system: backup ===
set backupdir=~/.vim/backup

" === system: directory ===
" set autochdir                       " pwd in current dir
set autoshelldir                    " pwd in current shell
set autowrite                       " usefull during buffer change
set dir=/tmp                        " define dir for swap files

" === system: clipboard ===
set clipboard=unnamedplus           " set system clipboard
set clipboard+=unnamed

" === system: history ===
set history=100                     " commands history
if version >= 703
  set undodir=~/.vim/undodir
  set undofile
  set undolevels=1000
  set undoreload=10000
endif

"------------------------------------------------------------------------------
" INTERFACE

" === ui: color ===
colors desert
colorscheme gruvbox
let background="dark"
set t_Co=256                        " 256 color mode

" === ui: content ===
filetype plugin on                  " allow type from other plugins
set encoding=utf-8                  " files encoding
set mouse=a                         " enable mouse usage
set number                          " line numbers
set paste                           " disable comments/tab completion in paste
" set relativenumber                  " relative line numbers
set ruler                           " show file stats
set hidden                          " allow edited buffer switch

" === ui: custom extension ===
augroup syntax_by_ext
  au!
  autocmd BufNewFile,BufRead *.html.twig set syntax=html
augroup END

" === ui: cursor ===
highlight CursorLine term=bold cterm=bold
set cursorline
set visualbell                      " blink instead of beep

" === ui: indent ===
" set autoindent              " autoindents
filetype indent on          " detect indent based on file type
set expandtab               " replaces tab with spaces
set formatoptions=tcqrn1
set noshiftround
set scrolloff=4             " always have 4 lines above/below the cursor
set shiftwidth=2            " how many columns to indent with >> and <<.
" set si                      " enables smart indentation
set softtabstop=2           " use spaces when tabbing
set tabstop=2               " convert tab in spaces
set textwidth=79            " set lines length
" set ft=tmux tw=0 nowrap     " tmux compatibility

" === ui: highlight ===
highlight ColorColumn ctermbg=darkgreen
call matchadd('ColorColumn', '\%81v',100)
syntax on
filetype on

" === ui: search ===
set hlsearch                        " highlight search
set incsearch                       " view incremental search
set ignorecase                      " make search case insensitive

" === ui: statusbar ===
set laststatus=2                    " statusbar mode
set nomodeline                      " security
set showcmd                         " show partial commands
set showmode                        " show current mode
set statusline=                     " clear statusline after reload
set statusline+=\ %F\ %M\ %Y\ %R    " set left side
set statusline+=%=                  " set separator
set statusline+=\ row:\ %l\ col:\ %c\ percent:\ %p%% " set right side

" === ui: terminal ===
set shell=/bin/bash                 " ensuring standard shell
set termencoding=utf-8              " shells encoding

" === ui: wildmenu ===
set wildmenu
set wildmode=list:full
set wildignore=*.swp,*.bak
set wildignore+=*.pyc,*.class,*.sln,*.Master,*.csproj,*.csproj.user,*.cache,*.dll,*.pdb,*.min.*
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*
set wildignore+=tags
set wildignore+=*.tar.*

" === ui: window ===
set guitablabel=\[%N\]\ %t\ %M      " set window's tabname
set ttyfast                         " rendering

"------------------------------------------------------------------------------
" MAPPING

" === map: leader ===
let mapleader="\<Space>"
let maplocalleader="_"

" === map: macro ===
map Q @@                           " repeat last recorded macro

" === map: buffer ===
nnoremap <leader>bd :bd<CR>        " del buffer
noremap <leader>bn :bn<CR>         " next buffer
noremap <leader>bp :bp<CR>         " previous buffer

" === map: copy ===
vnoremap Y 0y$                     " copy line without carriage return


" === map: indent ===
nnoremap <leader>q gqip            " formatter
vnoremap < <gv                     " keep visual mode while indenting
vnoremap > >gv                     " keep visual mode while indenting

" === map: search ===
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz
nnoremap <silent> ]q :cnext<cr>
nnoremap <silent> [q :cprev<cr>
nnoremap <silent> <leader>/ :nohls<CR>

" === map: replace ===
nnoremap + <C-a>                   " increment numbers
nnoremap - <C-x>                   " decrement numbers
nnoremap <leader>sr :%s/\<<C-r><C-w>\>//g<left><left>
xnoremap * :<c-u>let @/=@"<cr>gvy:let [@/,@"]=[@",@/]<cr>/\V<c-r>=substitute(escape(@/,'/\'),'\n','\\n','g')<cr><cr>

" === map: wrap ===
nnoremap j gj
nnoremap k gk

" === map: window ===
cmap w!! %sudo tee > /dev/null %                  " save as root
nnoremap <leader>h <C-w>h                         " left window
nnoremap <leader>j <C-w>j                         " lower window
nnoremap <leader>k <C-w>k                         " upper window
nnoremap <leader>l <C-w>l                         " right window
nnoremap <leader>wf :tabe %<CR>                   " current window to tab
nnoremap <leader>wt :term<CR>                     " terminal
nnoremap <silent> <leader><leader>h+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <leader><leader>h- :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap <silent> <leader><leader>w+ :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> <leader><leader>w- :exe "vertical resize " . (winwidth(0) * 2/3)<CR>

" === map: tab ===
nnoremap <leader>te :tabe<CR>
nnoremap <leader>th gT<CR>
nnoremap <leader>tl gt<CR>
nnoremap <leader>tq :tabc<CR>

" === map: terminal ===
tnoremap <C-h> <C-w>h
tnoremap <C-j> <C-w>j
tnoremap <C-k> <C-w>k
tnoremap <C-l> <C-w>l
tnoremap <C-t>t <C-c><CR><C-d><CR>

" === map: quick file ===
nnoremap <leader>en :e ~/.notes.md<CR>               " notes
nnoremap <leader>et :e /tmp/a<CR>                    " temp file
nnoremap <leader>ec :e ~/.config/vim/vimrc<CR>       " vim config

"------------------------------------------------------------------------------
" DIFF

set diffopt+=iwhite
set diffopt+=vertical
set diffopt+=filler
set diffopt+=internal,algorithm:patience
set diffopt+=indent-heuristic
set diffopt+=algorithm:histogram
set virtualedit=block

"------------------------------------------------------------------------------
" SEARCH

" === search: recent files ===
augroup recent_files_ext
  autocmd!
  autocmd BufLeave *.css  normal! mC
  autocmd BufLeave *.html normal! mH
  autocmd BufLeave *.js   normal! mJ
  autocmd BufLeave *.php  normal! mP
augroup END

" === search: content ===
set grepprg=rg\ -S\ --vimgrep
function! GrepFiles(search_term)
  lv /<args>/j **/*
endfunction
nnoremap <leader>sg :call GrepFiles(input('grep> '))<CR>

" === search: file ===
function! FindFiles(search_term, include_hidden)
  let currentDir = expand('%:p:h')

  let command =  'find ' . currentDir . ' -type f -iname "*' . a:search_term . '*"'
  if a:include_hidden
    let command = command . ' 2>/dev/null'
  else
    let command = command . ' -not -path "*/\.*" 2>/dev/null'
  endif

  if executable('rg')
    let command = 'rg --files --color=never --iglob"' . a:search_term . '" 2>/dev/null'
    if a:include_hidden
      let command = 'rg --files --color=never --hidden --no-ignore --iglob "' . a:search_term . '" 2>/dev/null'
    endif
  endif

  let file_list = systemlist(command)
  if len(file_list) == 0
    echo 'Not found'
    return
  endif

  call setqflist(map(file_list, '{ "filename": v:val }'))
  copen
endfunction
nnoremap <leader>sf :call FindFiles(input('files> '), 0)<CR>
nnoremap <leader>sF :call FindFiles(input('files (all)> '), 1)<CR>

"------------------------------------------------------------------------------
" VANILLA PLUGINS

" Next section contain functions that use external commands like git and ctags

"------------------------------------------------------------------------------
" GIT

" === git: blame ===
function! GitBlame()
  let filename = expand('%')
  let l:current_line = getcurpos()[1]
  let output = system('git blame ' . filename)
  if v:shell_error
    echo "Error running git blame"
    return
  endif

  vertical new
  call append(0, split(output, "\n"))
  setlocal buftype=nofile
  setlocal bufhidden=hide
  setlocal noswapfile
  setlocal nobuflisted
  setlocal nomodifiable
  setlocal nowrap
  setlocal nonumber
  setlocal norelativenumber
  setlocal noshowcmd
  setlocal noshowmode
  setlocal nolist
  setlocal syntax=git
  execute 'normal ' . l:current_line . 'G'
endfunction
nnoremap <leader>gb :call GitBlame()<CR>

"------------------------------------------------------------------------------
" CTAGS

" === ctags: location ===
set tags+=./tags;,tags

" === ctags: generate ===
nnoremap <Leader>rt :silent !ctags -R --exclude=.git--exclude=vendor --exclude=node_modules --exclude=db --exclude=log . <CR>:redraw!<CR>
