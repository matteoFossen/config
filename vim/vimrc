"------------------------------------------------------------------------------
" SYSTEM

" === system: command ===
set nocompatible                    " disable vi compatible

" === system: directory ===
" set autochdir                       " pwd in current dir
set autoshelldir                    " pwd in current shell
set autowrite                       " usefull during buffer change
set dir=/tmp                        " define dir for swap files

" === system: clipboard ===
set clipboard=unnamedplus           " set system clipboard
set clipboard+=unnamed

" === system: history ===
set history=100                     " commands history
if version >= 703
    set undodir=~/.vim/undodir
    set undofile
    set undolevels=1000
    set undoreload=10000
endif

"------------------------------------------------------------------------------
" INTERFACE

" === ui: color ===
colors desert
" colorscheme gruvbox
let background="dark"
set t_Co=256                        " 256 color mode

" === ui: content ===
set encoding=utf-8                  " files encoding
set mouse=a                         " enable mouse usage
set number                          " line numbers
set paste                           " disable comments/tab completion in paste
" set relativenumber                  " relative line numbers
set ruler                           " show file stats

" === ui: cursor ===
highlight CursorLine term=bold cterm=bold
set cursorline
set visualbell                      " blink instead of beep

" === ui: indent ===
" set autoindent              " autoindents
filetype indent on          " detect indent based on file type
set expandtab               " replaces tab with spaces
set formatoptions=tcqrn1
set noshiftround
set scrolloff=4             " always have 4 lines above/below the cursor
set shiftwidth=2            " how many columns to indent with >> and <<.
" set si                      " enables smart indentation
set softtabstop=2           " use spaces when tabbing
set tabstop=2               " convert tab in spaces
set textwidth=79            " set lines length
" set ft=tmux tw=0 nowrap     " tmux compatibility

" === ui: highlight ===
highlight ColorColumn ctermbg=darkgreen
call matchadd('ColorColumn', '\%81v',100)
syntax on
filetype on

" === ui: search ===
set hlsearch                        " highlight search
set incsearch                       " view incremental search

" === ui: statusbar ===
set laststatus=2                    " statusbar mode
set nomodeline                      " security
set showcmd                         " show partial commands
set showmode                        " show current mode
set statusline=                     " clear statusline after reload
set statusline+=\ %F\ %M\ %Y\ %R    " set left side
set statusline+=%=                  " set separator
set statusline+=\ row:\ %l\ col:\ %c\ percent:\ %p%% " set right side

" === ui: terminal ===
set shell=/bin/bash                 " ensuring standard shell
set termencoding=utf-8              " shells encoding

" === ui: wildmenu ===
set wildmenu
set wildmode=list:full
set wildignore=*.swp,*.bak
set wildignore+=*.pyc,*.class,*.sln,*.Master,*.csproj,*.csproj.user,*.cache,*.dll,*.pdb,*.min.*
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*
set wildignore+=tags
set wildignore+=*.tar.*

" === ui: window ===
set guitablabel=\[%N\]\ %t\ %M      " set window's tabname
set ttyfast                         " rendering

"------------------------------------------------------------------------------
" MAPPING

" === map: leader ===
let mapleader="\<Space>"    " use , as the leader key. Standard: \

" === map: macro ===
map Q @@                           " repeat last recorded macro

" === map: buffer ===
noremap <Leader>bp :bp<CR>         " previous buffer
noremap <Leader>bn :bn<CR>         " next buffer

" === map: copy ===
map Y 0y$                          " copy line without carriage return

" === map: indent ===
nnoremap <leader>q gqip            " formatter
vnoremap < <gv                     " keep visual mode while indenting
vnoremap > >gv                     " keep visual mode while indenting

" === map: search ===
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz
nnoremap <silent> <leader>/ :nohls<CR> "remove search highlight

" === map: replace ===
nnoremap + <C-a>                   " increment numbers
nnoremap - <C-x>                   " decrement numbers
nnoremap <leader>sr :%s/\<<C-r><C-w>\>//g<left><left>

" === map: wrap ===
nnoremap j gj
nnoremap k gk

" === map: window ===
cmap w!! %sudo tee > /dev/null %   " save as root
nnoremap <Leader>h <C-w>h         " left window
nnoremap <Leader>j <C-w>j         " lower window
nnoremap <Leader>k <C-w>k         " upper window
nnoremap <Leader>l <C-w>l         " right window
nnoremap <Leader>wf :tabe %<CR>    " current window to tab
nnoremap <Leader>wt :term<CR>      " terminal
nnoremap <silent> <leader><leader>h+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <leader><leader>h- :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap <silent> <leader><leader>w+ :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> <leader><leader>w- :exe "vertical resize " . (winwidth(0) * 2/3)<CR>

" === map: tab ===
nnoremap <Leader>te :tabe<CR>
nnoremap <Leader>th gT<CR>
nnoremap <Leader>tl gt<CR>
nnoremap <Leader>tq :tabc<CR>

" === map: terminal ===
tnoremap <C-h> <C-w>h
tnoremap <C-j> <C-w>j
tnoremap <C-k> <C-w>k
tnoremap <C-l> <C-w>l
tnoremap <C-t>t <C-c><CR><C-d><CR>

"------------------------------------------------------------------------------
" SEARCH

" === search: recent files ===
augroup VIMRC
  autocmd!
  autocmd BufLeave *.css  normal! mC
  autocmd BufLeave *.html normal! mH
  autocmd BufLeave *.js   normal! mJ
  autocmd BufLeave *.php  normal! mP
augroup END

" === search: content ===
function! FindFiles(search_term, include_hidden)
  let currentDir = expand('%:p:h')
  if a:include_hidden
      let command = 'find ' . currentDir . ' -type f -iname "*' . a:search_term . '*" 2>/dev/null'
  else
      let command = 'find ' . currentDir . ' -type f -iname "*' . a:search_term . '*" -not -path "*/\.*" 2>/dev/null'
  endif

  let file_list = systemlist(command)
  if len(file_list) == 0
    echo 'Not found'
    return
  endif

  call setqflist(map(file_list, '{ "filename": v:val }'))
  copen
endfunction
nnoremap <leader>sf :call FindFiles(input('files> '), 0)<CR>
nnoremap <leader>sF :call FindFiles(input('files (all)> '), 1)<CR>

" === search: files ===
function! GrepFiles(search_term)
  lv /<args>/j **/*
  lopen
endfunction
nnoremap <leader>sg :call GrepFiles(input('grep> '))<CR>

"------------------------------------------------------------------------------
" PLUGIN

" === git: blame ===
function! GitBlame()
    let filename = expand('%')
    let output = system('git blame ' . filename)
    if v:shell_error
        echo "Error running git blame"
        return
    endif

    vertical new
    call append(0, split(output, "\n"))
    setlocal buftype=nofile
    setlocal bufhidden=hide
    setlocal noswapfile
    setlocal nobuflisted
    setlocal nomodifiable
    setlocal nowrap
    setlocal nonumber
    setlocal norelativenumber
    setlocal noshowcmd
    setlocal noshowmode
    setlocal nolist
    setlocal syntax=git
endfunction
nnoremap <leader>gb :call GitBlame()<CR>

" TO DO:
" * ctags
