" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
syntax on

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
set hidden             " Hide buffers when they are abandoned
set mouse=r		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif


""""""""""""""""""""""""""""
"aggiunti da me"
""""""""""""""""""""""""""""

"Sets how many lines of history VIM has to remember
set history=1000

set undolevels=1000	" Use many muchos levels of undo

"Enable filetype plugins
filetype plugin on
filetype indent on

"Set to auto read when a file is changed from the outside
set autoread

set number		" turn on line numbers
set ruler		" Always show current positions along the bottom
set hlsearch		" highlight search things
set showmode		" mostra --INSERISCI--
set cpoptions+=$
set magic		" For regular expressions turn magic on
set matchtime=2		" Show matching bracket for 0.2 seconds
set matchpairs+=<:>	" Specially for html
set wildmenu		" Make tab completion for files/buffers act like bash
"set wildmode=list:full	" Show a list when pressing tab and complete first full match
set wildignore=*.swp,*.bak,*.pyc,*.class
set title		" Change the terminal's title
set t_Co=256		" Explicitly tell vim that the terminal has 256 colors
set visualbell		" Don't beep
set noerrorbells	" Don't beep
"set cursorline		" Underline the current line, for quick orientation

"
" COLORS
"
set background=dark
colorscheme desert
highlight Pmenu ctermfg=White ctermbg=Blue
highlight PmenuSel ctermbg=Yellow ctermfg=Black
highlight PmenuSbar ctermbg=Gray ctermfg=Black
highlight PmenuThumb ctermbg=White ctermfg=Black

""""""""""""""""""""""""""""
" => Statusline
"""""""""""""""""""""""""""" 
"set statusline=\ %F%m%r%h%w%y[%p%%][%l,%L/%v] 

" Always hide the statusline
set laststatus=2

"set statusline=%t      "tail of the filename
set statusline=%F	"file path 
set statusline+=%m      "modified flag
set statusline+=%h      "help file flag
set statusline+=%r      "read only flag 
set statusline+=%w	"preview window flag 
set statusline+=\ [%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%y      "filetype 
set statusline+=[buf:%n]	"buffer number
set statusline+=%=      "left/right separator
set statusline+=[l:\ %l/%L]   "cursor line/total lines
set statusline+=[c:\ %c]     "cursor column
set statusline+=\ %p%%   "percent through file


"
" IDENTATION
"
autocmd FileType php setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=120
autocmd FileType ruby setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=120
autocmd FileType php setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=120
autocmd FileType coffee,javascript setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=120
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=120
autocmd FileType html,htmldjango,xhtml,haml setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=0
autocmd FileType sass,scss,css setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=120


"Delete trailing white space, useful for Python ;)
func! DeleteTrailingWS()
	exe "normal mz"
	%s/\s\+$//ge
	exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()

"
" SYNTAX SUPPORT
"
autocmd Syntax javascript set syntax=jquery   " JQuery syntax support
" js
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"



""""""""""""""""""""""""""""
" => Vundle (plugins per Vim)
"""""""""""""""""""""""""""" 
"set nocompatible
"filetype off

"set rtp+=/home/halo/.vim/bundle/vundle
"call vundle#rc()

"let Vundle manage Vundle
""required!
"Bundle 'gmarik/vundle'

"The bundles you install will be listed here
""filetype plugin indent on
"Bundle 'Lokaltog/powerline', {'rtp': '/home/halo/.vim/bundle/powerline/powerline/bindings/vim/'}
"Bundle 'klen/python-mode'
"Bundle 'scrooloose/nerdtree'

"call vam#ActivateAddons(['powerline'])
